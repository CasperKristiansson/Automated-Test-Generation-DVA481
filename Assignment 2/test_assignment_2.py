# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import sys
sys.path.insert(0, 'Assignment 2')
import assignment_2 as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    banking_system_0 = module_0.BankingSystem()
    banking_system_0.create_account(
        banking_system_0, banking_system_0, banking_system_0
    )


def test_case_1():
    banking_system_0 = module_0.BankingSystem()
    var_0 = banking_system_0.deposit(banking_system_0, banking_system_0)
    assert var_0 == "Account not found"


def test_case_2():
    banking_system_0 = module_0.BankingSystem()
    var_0 = banking_system_0.withdraw(banking_system_0, banking_system_0)
    assert var_0 == "Account not found"


def test_case_3():
    banking_system_0 = module_0.BankingSystem()
    var_0 = banking_system_0.get_balance(banking_system_0)
    assert var_0 == "Account not found"


def test_case_5():
    bool_0 = False
    banking_system_0 = module_0.BankingSystem()
    var_0 = banking_system_0.create_account(bool_0, bool_0, bool_0)
    assert var_0 == "Account created successfully"
    assert banking_system_0.accounts == {False: {"name": False, "balance": False}}


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    int_0 = -425
    banking_system_0 = module_0.BankingSystem()
    var_0 = banking_system_0.create_account(int_0, int_0, int_0)
    assert var_0 == "Initial balance must be non-negative"
    var_0.withdraw(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    banking_system_0 = module_0.BankingSystem()
    var_0 = banking_system_0.create_account(bool_0, banking_system_0, bool_0)
    assert var_0 == "Account created successfully"
    assert len(banking_system_0.accounts) == 1
    var_1 = banking_system_0.deposit(bool_0, bool_0)
    assert var_1 == "Deposit amount must be positive"
    banking_system_0.deposit(bool_0, var_1)


def test_case_8():
    bool_0 = True
    banking_system_0 = module_0.BankingSystem()
    var_0 = banking_system_0.create_account(banking_system_0, bool_0, bool_0)
    assert var_0 == "Account created successfully"
    assert len(banking_system_0.accounts) == 1
    var_1 = banking_system_0.withdraw(banking_system_0, bool_0)
    assert var_1 == "Withdrawal successful"
    var_2 = banking_system_0.deposit(var_0, banking_system_0)
    assert var_2 == "Account not found"
    var_3 = banking_system_0.create_account(banking_system_0, var_0, bool_0)
    assert var_3 == "Account already exists"


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    banking_system_0 = module_0.BankingSystem()
    var_0 = banking_system_0.create_account(banking_system_0, bool_0, bool_0)
    assert var_0 == "Account created successfully"
    assert len(banking_system_0.accounts) == 1
    var_1 = banking_system_0.withdraw(banking_system_0, bool_0)
    assert var_1 == "Withdrawal successful"
    module_1.object(*var_0)


def test_case_10():
    bool_0 = False
    banking_system_0 = module_0.BankingSystem()
    var_0 = banking_system_0.create_account(bool_0, bool_0, bool_0)
    assert var_0 == "Account created successfully"
    assert banking_system_0.accounts == {False: {"name": False, "balance": False}}
    var_1 = banking_system_0.get_balance(bool_0)
    assert var_1 is False


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    banking_system_0 = module_0.BankingSystem()
    var_0 = banking_system_0.get_balance(bool_0)
    assert var_0 == "Account not found"
    var_1 = banking_system_0.create_account(bool_0, banking_system_0, bool_0)
    assert var_1 == "Account created successfully"
    assert len(banking_system_0.accounts) == 1
    var_2 = banking_system_0.deposit(bool_0, bool_0)
    assert var_2 == "Deposit successful"
    var_3 = module_1.object()
    var_2.create_account(var_2, var_2, var_2)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    banking_system_0 = module_0.BankingSystem()
    var_0 = banking_system_0.create_account(banking_system_0, bool_0, bool_0)
    assert var_0 == "Account created successfully"
    assert len(banking_system_0.accounts) == 1
    var_1 = banking_system_0.withdraw(banking_system_0, bool_0)
    assert var_1 == "Withdrawal amount must be positive"
    banking_system_0.deposit(banking_system_0, banking_system_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    banking_system_0 = module_0.BankingSystem()
    var_0 = banking_system_0.create_account(banking_system_0, bool_0, bool_0)
    assert var_0 == "Account created successfully"
    assert len(banking_system_0.accounts) == 1
    var_1 = banking_system_0.withdraw(banking_system_0, bool_0)
    assert var_1 == "Withdrawal successful"
    var_2 = banking_system_0.get_balance(var_0)
    assert var_2 == "Account not found"
    var_3 = banking_system_0.withdraw(banking_system_0, bool_0)
    assert var_3 == "Insufficient funds"
    var_4 = banking_system_0.deposit(var_2, banking_system_0)
    assert var_4 == "Account not found"
    var_5 = banking_system_0.deposit(bool_0, var_4)
    assert var_5 == "Account not found"
    var_4.withdraw(var_0, var_2)
